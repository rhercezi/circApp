version: "3.4"

services:
  zookeeper:
    image: bitnami/zookeeper
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: bitnami/kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "29094:29094"
    restart: always
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_LISTENERS=INTERNAL://kafka:29092,EXTERNAL://kafka:9092
      - KAFKA_ADVERTISED_LISTENERS=INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
    depends_on:
      - zookeeper

  mssql-container:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: mssqlDB
    restart: always
    ports: 
      - "1433:1433"
    volumes:
      - "sqlvolume:/var/opt/mssql"
    environment:
      - MSSQL_SA_PASSWORD=SQnzABaHTrs3aQt8m8wn
      - ACCEPT_EULA=Y
      - MSSQL_PID=Express
      
  mongo-container:
    image: mongo:latest
    container_name: mongoDB
    restart: always
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    ports:
      - "27017:27017"
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'localhost:27017'}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      retries: 30
    volumes:
      - "mongo_volume:/data/db"
      - "mongo_volume:/data/configdb"

  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    ports:
      - "1025:1025"  # SMTP port
      - "8025:8025"  # Web UI port

  user-command-api-container:
    image: user_command_api:latest
    container_name: user_command_api
    restart: always
    ports:
      - "5010:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    depends_on:
      - kafka
      - mailhog

  user-query-api-container:
    image: user_query_api:latest
    container_name: user_query_api
    restart: always
    ports:
      - "5011:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    depends_on:
      - kafka

  circles-command-api-container:
    image: circles_command_api:latest
    container_name: circles_command_api
    restart: always
    ports:
      - "5012:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    depends_on:
      - kafka

  circles-query-api-container:
    image: circles_query_api:latest
    container_name: circles_query_api
    restart: always
    ports:
      - "5013:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production


volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  sqlvolume:
    driver: local
  mongo_volume:
    driver: local
   
networks:
  default:
    external:
      name: mynet
